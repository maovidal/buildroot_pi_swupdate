# ##############################################################################
# Based on the default `raspberrypicm4io_64_defconfig` of the buildroot
# `2022.08.1`. Tested in `2022.08.1`
# ##############################################################################


BR2_aarch64=y
BR2_cortex_a72=y
BR2_ARM_FPU_VFPV4=y

BR2_TOOLCHAIN_BUILDROOT_CXX=y

BR2_SYSTEM_DHCP="eth0"

# Linux headers same as kernel, a 5.15 series
BR2_PACKAGE_HOST_LINUX_HEADERS_CUSTOM_5_15=y

BR2_LINUX_KERNEL=y
BR2_LINUX_KERNEL_CUSTOM_TARBALL=y
BR2_LINUX_KERNEL_CUSTOM_TARBALL_LOCATION="$(call github,raspberrypi,linux,6f921e98008589258f97243fb6658d09750f0a2f)/linux-6f921e98008589258f97243fb6658d09750f0a2f.tar.gz"
BR2_LINUX_KERNEL_DEFCONFIG="bcm2711"

# Build the DTB from the kernel sources
BR2_LINUX_KERNEL_DTS_SUPPORT=y
BR2_LINUX_KERNEL_INTREE_DTS_NAME="broadcom/bcm2711-rpi-cm4"

BR2_LINUX_KERNEL_NEEDS_HOST_OPENSSL=y

BR2_PACKAGE_RPI_FIRMWARE=y
BR2_PACKAGE_RPI_FIRMWARE_VARIANT_PI4=y
BR2_PACKAGE_RPI_FIRMWARE_CONFIG_FILE="$(BR2_EXTERNAL_US_CFG_PATH)/board/raspberrypi/cm4/config.txt"

# Required tools to create the SD image
BR2_PACKAGE_HOST_DOSFSTOOLS=y
BR2_PACKAGE_HOST_GENIMAGE=y
BR2_PACKAGE_HOST_MTOOLS=y

# Required tool to flash CM4 eMMC memory
BR2_PACKAGE_HOST_RASPBERRYPI_USBBOOT=y

# Filesystem / image
BR2_TARGET_ROOTFS_EXT2=y
BR2_TARGET_ROOTFS_EXT2_4=y
BR2_TARGET_ROOTFS_EXT2_SIZE="512M"
# BR2_TARGET_ROOTFS_TAR is not set
BR2_ROOTFS_POST_BUILD_SCRIPT="$(BR2_EXTERNAL_US_CFG_PATH)/board/raspberrypi/cm4/post-build.sh"
BR2_ROOTFS_POST_IMAGE_SCRIPT="$(BR2_EXTERNAL_US_CFG_PATH)/board/raspberrypi/cm4/post-image.sh"


# ##############################################################################
# Build requirements
# ##############################################################################

BR2_CCACHE=y
BR2_TOOLCHAIN_BUILDROOT_GLIBC=y
BR2_TARGET_TZ_INFO=y

# Required to be able to load modules automatically
BR2_ROOTFS_DEVICE_CREATION_DYNAMIC_MDEV=y

# Overlays
BR2_ROOTFS_OVERLAY="$(BR2_EXTERNAL_US_CFG_PATH)/board/raspberrypi/cm4/overlay"


# ##############################################################################
# Other
# ##############################################################################

# Root password
BR2_TARGET_GENERIC_ROOT_PASSWD="hi"

# System hostname
BR2_TARGET_GENERIC_HOSTNAME="MyDevice"

# System banner
BR2_TARGET_GENERIC_ISSUE="CM4 device *Preliminar to test support for U-Boot* ver 0.0.1"


# ##############################################################################
# U-Boot related
# ##############################################################################

# BR2_LINUX_KERNEL_CUSTOM_DTS_PATH="$(BR2_EXTERNAL_US_CFG_PATH)/board/raspberry/cm4/dts/bcm2711-rpi-cm4.dts $(BR2_EXTERNAL_US_CFG_PATH)/board/raspberry/cm4/dts/custom-cm4.dtsi"
BR2_LINUX_KERNEL_INSTALL_TARGET=y
# BR2_PACKAGE_BUSYBOX_CONFIG_FRAGMENT_FILES="$(BR2_EXTERNAL_US_CFG_PATH)/board/raspberry/cm4/busybox.fragment"

# dtc (libfdt) Flat Device Trees manipulation library
# BR2_PACKAGE_DTC=y
# BR2_PACKAGE_DTC_PROGRAMS=y

# Read only file system
# BR2_TARGET_ROOTFS_SQUASHFS=y

BR2_TARGET_UBOOT=y
BR2_TARGET_UBOOT_BOARD_DEFCONFIG="rpi_arm64"
BR2_TARGET_UBOOT_BUILD_SYSTEM_KCONFIG=y
BR2_TARGET_UBOOT_CONFIG_FRAGMENT_FILES="$(BR2_EXTERNAL_US_CFG_PATH)/board/raspberrypi/cm4/u-boot.fragment"

# Environment-setup script installed in output/host/ and therefore in your SDK.
# BR2_PACKAGE_HOST_ENVIRONMENT_SETUP=y

BR2_PACKAGE_HOST_UBOOT_TOOLS=y
BR2_PACKAGE_HOST_UBOOT_TOOLS_ENVIMAGE=y
BR2_PACKAGE_HOST_UBOOT_TOOLS_ENVIMAGE_SIZE="0x8000"
BR2_PACKAGE_HOST_UBOOT_TOOLS_ENVIMAGE_REDUNDANT=y
BR2_PACKAGE_HOST_UBOOT_TOOLS_BOOT_SCRIPT=y
BR2_PACKAGE_HOST_UBOOT_TOOLS_BOOT_SCRIPT_SOURCE="$(BR2_EXTERNAL_BR2RAUC_PATH)/board/raspberrypi/cm4/u-boot.ush"


# ##############################################################################
# SWUpdate
# ##############################################################################

# Do compress the ext2/3/4 filesystem with gzip
# BR2_TARGET_ROOTFS_EXT2_GZIP=y # Seems to remove ext4?

# Link Time Optimization (LTO) gives GCC the capability of dumping its internal representation (GIMPLE) to disk, so that all the different compilation units that make up a single executable can be optimized as a single module.
# BR2_GCC_ENABLE_LTO=y
